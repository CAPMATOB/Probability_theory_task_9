#1)–î–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ–ª–∏—á–∏–Ω—ã –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –∑–∞–µ–º—â–∏–∫–æ–≤ –±–∞–Ω–∫–∞ (zp) –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Ö –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞ (ks): 
zp = 35, 45, 190, 200, 40, 70, 54, 150, 120, 110, 
ks = 401, 574, 874, 919, 459, 739, 653, 902, 746, 832. 
#–ò—Å–ø–æ–ª—å–∑—É—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, –ø—Ä–∏–Ω—è–≤ –∑–∞ X –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É (—Ç–æ –µ—Å—Ç—å, zp - –ø—Ä–∏–∑–Ω–∞–∫), –∞ –∑–∞ y - –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ (—Ç–æ –µ—Å—Ç—å, ks - —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è). –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç –∫–∞–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º intercept, —Ç–∞–∫ –∏ –±–µ–∑.
import numpy as np
import matplotlib.pyplot as plt
x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

print(f'–†–∞—Å—á–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª —Å intercept \n≈∑ = b0 + b1 ‚àó x')
print()

n = len(x)

b1 = (np.mean(x*y) - np.mean(x) * np.mean(y)) / (np.mean(x**2) - np.mean(x)**2)
print(f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç b1: {round(b1, 2)}')
b0 = np.mean(y) - b1*np.mean(x)
print(f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç b0: {round(b0, 2)}')

y_pred = b0 + b1 * x
print(f'–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: ≈∑ = {round(b0, 2)} + {round(b1, 2)} * x')

print(f'–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å: mse = {round(((y - y_pred)**2).sum() / n, 2)}')

plt.scatter(x, y, label = 'x, y')
plt.plot(x, y_pred, 'g', label = '≈∑ = 444.18 + 2.62 * x')
plt.xlabel('zp')
plt.ylabel('ks')
plt.legend()
x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
print(f'–†–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—á–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –±–µ–∑ intercept \n≈∑ = b1 ‚àó x')
print()

x1 = x.reshape((10, 1))
# print(x)
y1 = y.reshape((10, 1))
# print(y)

B = np.dot(np.linalg.inv(np.dot(x1.T,x1)), x1.T @ y1)
print(f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç b1: {round(B[0,0], 2)}')

y_pred = B[0,0] * x
print(f'–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: ≈∑ = {round(B[0,0], 2)} * x')

print(f'–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å: mse = {((y - y_pred)**2).sum() / n}')

plt.scatter(x1, y1, label = 'x, y')
plt.plot(x1, y_pred, 'r', label = '≈∑ = 5.89 * x')
plt.xlabel('zp')
plt.ylabel('ks')
plt.legend()

#####################################

#2)–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ (zp), –∏—Å–ø–æ–ª—å–∑—É—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (–±–µ–∑ intercept).
# –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å ùëöùë†ùëí = (‚àë(ùë¶ ‚àí ùë¶_ùëùùëüùëíùëë)^2) / ùëõ
x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
print(f'–†–∞—Å—á–µ—Ç –º–µ—Ç–æ–¥–æ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞ –±–µ–∑ intercept \n≈∑ = b1 ‚àó x')
print()

def mse_(B1, y=y, x=x, n=10):
    return ((B1 * x - y)**2).sum() / n

alpha = 1e-6
b1 = 0.1
n=10

for i in range(1001):
    b1 -= alpha * (2/n) * np.sum((b1*x - y) * x)
    if i%100 == 0:
        print(f'Iteration = {i}, b1 = {b1}, mse = {mse_(b1)}')
print()

print(f'–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å –ø—Ä–∏ b1 = {round(b1, 2)}: mse = {round(mse_(b1), 2)}')

print(f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç b1: {round(b1, 2)}')

print(f'–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: ≈∑ = {round(b1, 2)} * x')

###################################

#3)–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–∞–∫ –≤ –ø—É–Ω–∫—Ç–µ 2, –Ω–æ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º intercept. –£—á–µ—Å—Ç—å, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –≤–æ –≤—Ä–µ–º—è –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏).
x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

print(f'–†–∞—Å—á–µ—Ç –º–µ—Ç–æ–¥–æ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞ —Å intercept \n≈∑ = b0 + b1 ‚àó x')
print()

def mse_(B0, B1, y=y, x=x, n=10):
    return ((B0 + B1*x - y)**2).sum() / n

alpha = 1e-5
b0 = 1
b1 = 1
n=10

for i in range(3000000):
    b0 -= alpha * (2/n) * np.sum(b0 + b1*x - y)
    b1 -= alpha * (2/n) * np.sum((b0 + b1*x - y)*x)
    if i%500000 == 0:
        print(f'Iteration = {i}, b0 = {b0}, b1 = {b1}, mse = {mse_(b0, b1)}')
print()

y_pred = b0 + b1 * x
print(f'–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: ≈∑ = {round(b0, 2)} + {round(b1, 2)} * x')

print(f'–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å: mse = {round(mse_(b0, b1), 2)}')

plt.scatter(x, y, label = 'x, y')
plt.plot(x, y_pred, 'g', label = '≈∑ = 444.18 + 2.62 * x')
plt.xlabel('zp')
plt.ylabel('ks')
plt.legend()
from sklearn.linear_model import LinearRegression

x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

x = x.reshape(-1, 1)

model = LinearRegression()
regres = model.fit(x, y)
b0 = regres.intercept_
b1 = regres.coef_[0]
y_pred = model.predict(x)
print(f'–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ —Å intercept: ≈∑ = {round(b0, 2)} + {round(b1, 2)} * x')

model_1 = LinearRegression(fit_intercept=False)
regres = model_1.fit(x, y)
b1 = regres.coef_[0]
y_pred_1 = model_1.predict(x)
print(f'–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –±–µ–∑ intercept: ≈∑ = {round(b1, 2)} * x')

plt.scatter(x, y, label = 'x, y')
plt.plot(x, y_pred_0, 'g', label = '≈∑ = 444.18 + 2.62 * x')
plt.plot(x, y_pred_1, 'r', label = '≈∑ = 5.89 * x')
plt.xlabel('zp')
plt.ylabel('ks')
plt.legend()